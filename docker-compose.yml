version: "3.7"
services:
  db:
    image: postgres:15
    restart: always
    container_name: postgres_app
    environment:
      - POSTGRES_USER=${DB_USER} # Default superuser name in PostgreSQL. Change as needed.
      - POSTGRES_PASSWORD=${DB_PASS}
      - PGUSER=${DB_USER} # The PostgreSQL username to be used by the application and healthcheck.
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - ../weatherbuddy_data/pg_data:/var/lib/postgresql/data # Moved data dir outside the project to avoid unintended code monitoring, enhance security, ease backup & restore, isolate from code conflicts.

  redis:
    image: redis:7
    restart: always
    container_name: redis_app
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - ../weatherbuddy_data/redis_data:/data

  app:
    build: .
    restart: always
    env_file:
      - .env.prod
    environment:
      - CLIENT_HOST=${CLIENT_HOST}
      - CLIENT_PORT=${CLIENT_PORT}
      - CONTAINER_PORT=${CONTAINER_PORT}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
    container_name: fastapi_app
    command:
      - sh
      - -c
      - |
        alembic upgrade head
        gunicorn src.main:app --access-logfile logs/gunicorn.log --workers 3 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:$$CONTAINER_PORT
    ports:
      - ${CLIENT_PORT}:${CONTAINER_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "curl -f http://${CLIENT_HOST}:${CONTAINER_PORT} -H 'Healthcheck-Header: healthcheck-message'",
        ]
      interval: 10s
      timeout: 5s
      retries: 1
    volumes:
      - ../weatherbuddy_data/logs:/fastapi-app/logs

  mongodb:
    image: mongo:6.0.6
    restart: always
    container_name: mongo_app
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-seed:
    build:
      context: ./mongo_seed
      args:
        - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
        - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    container_name: mongo_seed
    depends_on:
      mongodb:
        condition: service_healthy

  celery:
    build: .
    restart: always
    env_file:
      - .env.prod
    container_name: celery_app
    command: celery -A src.celery_app:celery worker -l INFO
    depends_on:
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A src.celery_app inspect ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  flower:
    build: .
    restart: always
    env_file:
      - .env.prod
    container_name: flower_app
    command: celery -A src.celery_app:celery flower
    depends_on:
      redis:
        condition: service_healthy
      celery:
        condition: service_healthy
    ports:
      - 4444:5555
    healthcheck:
      test: curl -f http://$$CLIENT_HOST:5555
      interval: 10s
      timeout: 5s
      retries: 1
